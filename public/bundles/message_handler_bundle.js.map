{"version":3,"file":"message_handler_bundle.js","mappings":"4rBAAqBA,EAAc,WAE/B,c,4FACA,SAEEC,KAAKC,SAAW,GAGhBD,KAAKE,WAAa,CAChB,MAAU,kBACV,QAAY,kBACZ,QAAY,wBACZ,KAAS,kBAIXF,KAAKG,kBAAoBC,SAASC,cAAc,OAChDL,KAAKG,kBAAkBG,UAAUC,IAAI,oBACrCP,KAAKG,kBAAkBK,MAAMC,WAAa,SAC1CL,SAASM,KAAKC,YAAYX,KAAKG,kBACjC,C,QA4EC,O,EA1ED,E,EAAA,yBACA,SAAWS,GACTZ,KAAKC,SAASY,KAAKD,EACrB,GAEA,0BACA,WAEEZ,KAAKG,kBAAkBK,MAAMC,WAAa,UAE1C,IAAK,IAAIK,EAAI,EAAGA,EAAId,KAAKC,SAASc,OAAQD,IACxCd,KAAKgB,cAAchB,KAAKC,SAASa,IAGnCd,KAAKC,SAAW,EAClB,GAEA,2BACA,SAAcW,GAAQ,WAEhBK,EAAmBb,SAASC,cAAc,OAC9CY,EAAiBX,UAAUC,IAAI,SAC/BU,EAAiBX,UAAUC,IAAIK,EAAQM,MAGvC,IAAIC,EAAiBf,SAASC,cAAc,OAC5Cc,EAAeb,UAAUC,IAAI,iBAG7B,IAAIa,EAAchB,SAASC,cAAc,KACzCe,EAAYd,UAAUC,IAAI,aAC1Ba,EAAYd,UAAUC,IAAI,OAC1Ba,EAAYd,UAAUC,IAAIP,KAAKE,WAAWU,EAAQM,OAGlD,IAAIG,EAAOjB,SAASkB,eAAeV,EAAQS,MAS3C,GANAF,EAAeR,YAAYS,GAC3BD,EAAeR,YAAYU,GAE3BJ,EAAiBN,YAAYQ,GAGzBP,EAAQW,OAAO,CACjB,IAAIA,EAASnB,SAASC,cAAc,KACpCkB,EAAOjB,UAAUC,IAAI,kBACrB,IAAIiB,EAAapB,SAASkB,eAAeV,EAAQW,OAAOF,MACxDE,EAAOZ,YAAYa,GACnBD,EAAOE,aAAa,OAAQb,EAAQW,OAAOG,MAC3CT,EAAiBN,YAAYY,EAC/B,KAEK,CACH,IAAII,EAAYvB,SAASC,cAAc,KACvCsB,EAAUrB,UAAUC,IAAI,cACxBoB,EAAUrB,UAAUC,IAAI,OACxBoB,EAAUrB,UAAUC,IAAI,YAGxBU,EAAiBN,YAAYgB,GAG7BA,EAAUC,iBAAiB,SAAS,WAClCX,EAAiBY,SAC+B,GAA5C,EAAK1B,kBAAkB2B,WAAWf,SACpC,EAAKZ,kBAAkBK,MAAMC,WAAa,SAE9C,GACF,CAGAT,KAAKG,kBAAkBQ,YAAYM,EAErC,I,uEAAC,EAhG8B,GCE/Bc,EAAkB,IAAIhC,EAG1B,GAAIiC,OAAO/B,SAEP,IAAK,IAAIa,EAAI,EAAGA,EAAIkB,OAAO/B,SAASc,OAAQD,IACxCiB,EAAgBE,WAAWD,OAAO/B,SAASa,IAInDiB,EAAgBG,c","sources":["webpack://imagine_dungeons/./public/js/MessageHandler.js","webpack://imagine_dungeons/./public/js/message_handler.js"],"sourcesContent":["export default class MessageHandler\n{\n    constructor()\n    {\n      // Initialize the messages array\n      this.messages = []\n      \n      // Define a mapping of message types to icon classes\n      this.icon_class = {\n        \"error\" : \"fa-times-circle\",\n        \"success\" : \"fa-check-circle\",\n        \"warning\" : \"fa-exclamation-circle\",\n        \"info\" : \"fa-info-circle\"\n      }\n\n      // Create a container to hold the messages and add it to the HTML body\n      this.messagesContainer = document.createElement(\"div\");\n      this.messagesContainer.classList.add('alerts-container');\n      this.messagesContainer.style.visibility = \"hidden\"\n      document.body.appendChild(this.messagesContainer);\n    }\n\n    // Add a new message to the messages array\n    addMessage(message){\n      this.messages.push(message)\n    }\n\n    // Show all the messages in the messages array\n    showMessages(){\n      // Make the messages container visible\n      this.messagesContainer.style.visibility = \"visible\"\n      // Iterate through all the messages and create message elements for each one\n      for (var i = 0; i < this.messages.length; i++){\n        this.createMessage(this.messages[i])\n      }\n      // Clear the messages array\n      this.messages = []\n    }\n\n    // Create a new message element with a type, content, and optionally a button\n    createMessage(message){\n      // Create a div to hold the message and set its classes based on the message type\n      var messageContainer = document.createElement(\"div\");\n      messageContainer.classList.add('alert');\n      messageContainer.classList.add(message.type);\n\n      // Create a div to hold the message content\n      var messageContent = document.createElement(\"div\");\n      messageContent.classList.add('alert-content');\n\n      // Create an icon element for the message type\n      var messageIcon = document.createElement(\"i\");\n      messageIcon.classList.add('type-icon');\n      messageIcon.classList.add('fas');\n      messageIcon.classList.add(this.icon_class[message.type]);\n\n      // Create a text node for the message content\n      var text = document.createTextNode(message.text);\n\n      // Add the icon and text to the message content div\n      messageContent.appendChild(messageIcon);\n      messageContent.appendChild(text);\n\n      messageContainer.appendChild(messageContent);\n\n      // If the message has a button, add an anchor element to the message\n      if (message.button){\n        var button = document.createElement(\"a\");\n        button.classList.add('message-button');\n        var buttonText = document.createTextNode(message.button.text);\n        button.appendChild(buttonText)\n        button.setAttribute(\"href\", message.button.href)\n        messageContainer.appendChild(button);\n      } \n      // If the message does not have a button, add a close icon\n      else {\n        var closeIcon = document.createElement(\"i\");\n        closeIcon.classList.add('close-icon');\n        closeIcon.classList.add('fas');\n        closeIcon.classList.add(\"fa-times\");\n\n        // Add the close icon to the message container\n        messageContainer.appendChild(closeIcon);\n\n        // Add a click event listener to the close icon to remove the message and hide the messages container if it is empty\n        closeIcon.addEventListener(\"click\", () => {\n          messageContainer.remove()\n          if (this.messagesContainer.childNodes.length == 0){\n            this.messagesContainer.style.visibility = \"hidden\"\n          }\n        })\n      }\n\n      // Add the message container to the messages container\n      this.messagesContainer.appendChild(messageContainer);\n\n    }\n}","import MessageHandler from \"./MessageHandler\";\n\nvar message_handler = new MessageHandler()\n\n// If there are messages in the window object\nif (window.messages){\n    // Add each message to the message handler's message list\n    for (var i = 0; i < window.messages.length; i++){\n        message_handler.addMessage(window.messages[i])            \n    }\n}\n// Show the messages using the message handler\nmessage_handler.showMessages()"],"names":["MessageHandler","this","messages","icon_class","messagesContainer","document","createElement","classList","add","style","visibility","body","appendChild","message","push","i","length","createMessage","messageContainer","type","messageContent","messageIcon","text","createTextNode","button","buttonText","setAttribute","href","closeIcon","addEventListener","remove","childNodes","message_handler","window","addMessage","showMessages"],"sourceRoot":""}